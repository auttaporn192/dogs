{"version":3,"sources":["Components/NewIssue/NewIssue.js","Components/Issue/Issue.js","Components/IssueList/IssueList.js","App.js","serviceWorker.js","index.js"],"names":["NewIssue","AddIssue","type","placeholder","onClick","e","preventDefault","Issue","title","status","className","value","IssueList","props","state","todos","id","this","map","todo","key","issueList","newIssue","push","console","log","setState","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6RAeeA,EAbE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAKf,OACI,6BACQ,2BAAOC,KAAK,OAAOC,YAAY,WAC/B,4BAAQC,QAPC,SAAAC,GACjBA,EAAEC,iBACFL,EAAS,SAKD,aCEDM,G,MATD,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAQC,EAAY,EAAZA,OACpB,OACI,yBAAKC,UAAU,SACX,2BAAOR,KAAK,QAAQS,MAAOF,IAC3B,+BAAQD,MC+BLI,G,MAjCf,kDACA,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAO,CACRC,MAAQ,CACJ,CAAEC,GAAG,EAAER,MAAO,gBAAiBC,QAAQ,GACvC,CAAEO,GAAG,EAAER,MAAO,iBAAkBC,QAAQ,GACxC,CAAEO,GAAG,EAAER,MAAO,kBAAmBC,QAAQ,KANlC,EADnB,qDAWc,IAAD,OASL,OACI,oCACA,yBAAKC,UAAU,cAEPO,KAAKH,MAAMC,MAAMG,KAAI,SAAAC,GAAI,OAAK,kBAAC,EAAD,CAAMC,IAAKD,EAAKH,GAAIR,MAAOW,EAAKX,MAAOC,OAAQU,EAAKV,aAG1F,kBAAC,EAAD,CAAUR,SAdG,SAACO,GAClB,IAAMa,EAAY,EAAKP,MAAMC,MACvBO,EAAW,CAACN,GAAG,EAAGR,QAAMC,QAAO,GACrCY,EAAUE,KAAKD,GACdE,QAAQC,IAAI,EAAKX,MAAMC,OACvB,EAAKW,SAAS,CAACX,MAAMM,YAlB9B,GAA+BM,cCQhBC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.e66b8bb5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst NewIssue = ({AddIssue}) => {\r\n    const handleClick  = e =>  {\r\n        e.preventDefault();\r\n        AddIssue(\"PIK\") \r\n    }\r\n    return (\r\n        <div>\r\n                <input type=\"text\" placeholder=\"todo..\" />\r\n                <button onClick = {handleClick}> Submit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewIssue\r\n","import React from 'react'\r\nimport './issue.styled.css'\r\n\r\nconst Issue = ({title , status}) => {\r\n    return (\r\n        <div className=\"issue\">\r\n            <input type=\"radio\" value={status} />\r\n            <label>{title}</label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Issue\r\n","import React, { Component } from 'react'\r\nimport NewIssue from '../NewIssue/NewIssue'\r\nimport List from '../Issue/Issue'\r\nimport './issueList.styled.css'\r\n\r\nexport class IssueList extends Component {\r\nconstructor(props) {\r\n    super(props);\r\n    this.state ={\r\n        todos : [\r\n            { id:1,title: \"make a report\", status: false },\r\n            { id:2,title: \"weekly meeting\", status: false },\r\n            { id:3,title: \"test and deploy\", status: false }\r\n        ]\r\n    }\r\n}\r\n    render() {\r\n\r\n        const AddIssue = (title) => {\r\n        const issueList = this.state.todos\r\n        const newIssue = {id:4, title,status:false}\r\n        issueList.push(newIssue)\r\n         console.log(this.state.todos)    \r\n         this.setState({todos:issueList})\r\n    }\r\n        return (\r\n            <>\r\n            <div className=\"issue-list\">\r\n                {\r\n                    this.state.todos.map(todo => (<List key={todo.id} title={todo.title} status={todo.status} />))\r\n                }\r\n            </div>\r\n            <NewIssue AddIssue={AddIssue} />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IssueList\r\n","import React from 'react';\r\nimport IssueList from './Components/IssueList/IssueList.js'\r\nimport NewIssue from './Components/NewIssue/NewIssue'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <IssueList />\r\n    \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}