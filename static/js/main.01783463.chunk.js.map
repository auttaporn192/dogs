{"version":3,"sources":["Components/NewIssue/NewIssue.js","Components/Issue/Issue.js","Components/IssueList/IssueList.js","Components/HistoryList/HistoryList.js","App.js","serviceWorker.js","index.js"],"names":["NewIssue","AddIssue","useState","title","setTitle","className","onSubmit","e","preventDefault","type","placeholder","onChange","console","log","target","value","Issue","status","save","todoid","erase","edit","setEdit","text","setText","remove","setRemove","editHandle","edtStatue","icon","onClick","setTimeout","deleteHandle","saveHandle","IssueList","props","state","todos","id","UpdateIssue","issueList","forEach","cp","setState","deleteIssue","filter","issue","this","map","todo","key","newIssue","push","Component","HistoryList","lists","setLists","ls","newList","library","add","fab","faCheckSquare","faCoffee","faTrash","faPen","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.01783463.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport './newIssue.styled.css'\r\n\r\nconst NewIssue = ({AddIssue}) => {\r\n    const [title,setTitle] = useState('')\r\n    const handleChange = e => {\r\n        e.preventDefault()\r\n        console.log(e.target.value)\r\n        setTitle(e.target.value)\r\n    }\r\n    const formSubmit  = e =>  {\r\n        e.preventDefault();\r\n        AddIssue(title) \r\n    }\r\n    return (\r\n        <form className=\"new-issue\" onSubmit={formSubmit}>\r\n                <input type=\"text\" placeholder=\"todo..\" onChange={handleChange} value={title} />\r\n                <button> Submit</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NewIssue\r\n","import React, {useState} from 'react'\r\nimport './issue.styled.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst Issue = ({title , status , save , todoid , erase}) => {\r\n    const [edit,setEdit] = useState(false)\r\n    const [text,setText] = useState('')\r\n    const [remove,setRemove] = useState(false)\r\n   \r\n    const editHandle = edtStatue => {\r\n        setEdit(edtStatue)\r\n    }\r\n\r\n    const textHandle = e => {\r\n        setText(e.target.value)\r\n    }\r\n    const saveHandle = todoid => {\r\n         setEdit(false);\r\n        save(todoid,text)\r\n       \r\n    }\r\n\r\n    const deleteHandle = todoid => {\r\n        if(!status) \r\n        setRemove(true)\r\n        setTimeout(()=> {erase(todoid)},500)\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"wrapper\">\r\n        <div className={`issue  ${remove && \"issue-remove\"}`}>\r\n        <div className= {`issue-container  ${edit && \"issue-container-edit\"} `}>\r\n            \r\n          <div className={`issue-view `} >  \r\n            <div className={`title2 ${!status && \"delete-issue\"}`}>\r\n                {/*<input type=\"radio\" value={status} /> */}\r\n                <span>{title}</span>\r\n            </div>\r\n            <div className=\"con-update\">\r\n             <span><FontAwesomeIcon icon=\"pen\" onClick={() => editHandle(true)}></FontAwesomeIcon></span>\r\n             <span><FontAwesomeIcon icon=\"trash\" onClick={() => deleteHandle(todoid)}/></span>\r\n             </div>\r\n          </div>\r\n            \r\n             <div className= \"issue-edit\">\r\n                <input type=\"text\" onChange={textHandle} value={text} />\r\n                <button onClick={() => saveHandle(todoid)}>Save</button>\r\n                <button onClick={() => editHandle(false)}>Cancel</button>\r\n             </div>\r\n\r\n         </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default Issue\r\n","import React, { Component } from 'react'\r\nimport NewIssue from '../NewIssue/NewIssue'\r\nimport List from '../Issue/Issue'\r\nimport './issueList.styled.css'\r\n\r\nexport class IssueList extends Component {\r\nconstructor(props) {\r\n    super(props);\r\n    this.state ={\r\n        todos : [\r\n            { id:1,title: \"make a report\", status: true },\r\n            { id:2,title: \"weekly meeting\", status: true },\r\n            { id:3,title: \"test and deploy\", status: true }\r\n        ]\r\n    }\r\n}\r\n    render() {\r\n\r\n        const AddIssue = (title) => {\r\n        const issueList = this.state.todos\r\n        const newIssue = {id:4, title,status:false}\r\n        issueList.push(newIssue)\r\n         console.log(this.state.todos)    \r\n         this.setState({todos:issueList})\r\n    }\r\n\r\n        const UpdateIssue = (id,title) =>{\r\n            const issueList = [...this.state.todos]\r\n            issueList.forEach(cp => {\r\n                console.log(id)\r\n                if (cp.id === id){\r\n                    cp.title= title\r\n                }\r\n            })\r\n\r\n            this.setState({todos:issueList})\r\n        }\r\n\r\n    const deleteIssue = (id) => {\r\n        console.log(\"test\")\r\n        let issueList = [...this.state.todos]\r\n        issueList = issueList.filter(issue => issue.id !== id || issue.status === true)\r\n        issueList.forEach(cp => {\r\n            if(cp.id === id){\r\n                cp.status = false\r\n            }\r\n        })\r\n        this.setState({todos:issueList})\r\n    }   \r\n\r\n    const eliminate = (id) => {\r\n\r\n    }\r\n\r\n        return (\r\n            <>\r\n            <div className=\"issue-list\">\r\n                {\r\n                    this.state.todos.map(todo => (<List key={todo.id} title={todo.title} status={todo.status}\r\n                    save={UpdateIssue} todoid={todo.id} erase={deleteIssue} />))\r\n                }\r\n            \r\n            <NewIssue AddIssue={AddIssue} />\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IssueList\r\n","import React , {useState} from 'react'\r\nimport Issue from '../Issue/Issue'\r\n import NewIssue from '../NewIssue/NewIssue'\r\n import \"./history.styled.css\"\r\nconst HistoryList = () => {\r\n     \r\n      const listHistory = [\r\n         { id:1,title: \"take a baht\", status: true },\r\n            { id:2,title: \"watch market shared\", status: false },\r\n            { id:3,title: \"take a examine.\", status: true }\r\n    ]\r\n    const [lists , setLists] = useState(listHistory)\r\n  \r\n   \r\n\r\n    const AddIssue = (title) => {\r\n        const newList = [...lists]\r\n        newList.push({ id:4 ,title, status: true })\r\n        setLists(newList) \r\n    }\r\n    return (\r\n        <div className=\"history-list\">\r\n            {lists.map(ls => (<Issue key={ls.id} title={ls.title} status={ls.status}></Issue>))}\r\n            <NewIssue AddIssue={AddIssue} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HistoryList\r\n","import React from 'react';\r\nimport IssueList from './Components/IssueList/IssueList.js'\r\nimport './App.css'\r\nimport HistoryList from './Components/HistoryList/HistoryList'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { fab } from '@fortawesome/free-brands-svg-icons'\r\nimport { faCheckSquare, faCoffee , faTrash ,faPen } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(fab, faCheckSquare, faCoffee , faTrash ,faPen )\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container-issue\">\r\n      <IssueList />\r\n      <HistoryList />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}